Operators
=========

Type Abbreviations
------------------

.. csv-table::

  "Type","Abbreviation"
  "Number",N
  "String",S
  "Char",C
  "Block",B
  "Dict",D
  "Symbol",J

Operator Table
--------------

.. csv-table::

  "Name","Args","Ops","Overload"
  "``!``","``N|C``","``N`` : 1-N (logical not, complementary probability), ``C`` : swap case","``__new__``"
  "``#``","``LA..#A``","``LA..#A`` : map",""
  "``$``","``A``","``A`` : deepcopy (duplicate)",""
  "``%``","``NN|BN``","``NN`` : mod, ``BN`` : repeat B N times","``__mod__`` / ``__rmod__``"
  "``&``","``SS|NN``","``SS`` : list all expressions matching the regex, ``NN`` : bitwise and","``__and__`` / ``__rand__``"
  "``*``","``LS|LC|NN``","``LS`` : join, ``LC`` : join, ``NN`` : multiply","``__mul__`` / ``__rmul__``"
  "``+``","``CC|SA|AS|NN``","``CC`` : add, ``SA`` : append string, ``AS`` : append string, ``NN`` : add","``__add__`` / ``__radd__``"
  "``-``","``CC|NN``","``CC`` : subtract, ``NN`` : subtract","``__sub__`` / ``__rsub__``"
  "``/``","``LB|NN``","``LB`` : fold, ``NN`` : divide","``__div__`` / ``__rdiv__``"
  "``;``","``A``","``A`` : pop and discard",""
  "``<``","``SS|CC|NN``","``SS`` : less than, ``CC`` : less than, ``NN`` : less than","``__lt__`` / ``__rlt__``"
  "``=``","``AA``","``AA`` : equality","``__eq__``"
  "``>``","``SS|CC|NN``","``SS`` : greater than, ``CC`` : greater than, ``NN`` : greater than","``__gt__`` / ``__rgt__``"
  "``?``","``AA``","``AA`` : if A1, then A2. If A2 is block, execute it",""
  "``@``","``AAA``","``AAA`` : rotates the top three elements on the stack [abc->bca]",""
  "``A``","``A``","``A`` : wrap in list",""
  "``B``","``J|L|N|C``","``J`` : increment in place, ``L`` : uncons from front, ``N`` : increment, ``C`` : increment","``__inc__``"
  "``C``","``L|S|N``","``L`` : sort least to greatest, ``S`` : sort least to greatest, ``N`` : bitwise not","``__sort__``"
  "``D``","``ALN``","``ALN`` : set index","``__setindex__``"
  "``E``","``L|N|S``","``L`` : length, ``N`` : 10^N, ``S`` : length","``__len__``"
  "``F``","``NN``","``NN`` : unsigned right bitshift",""
  "``G``","``S|N``","``S`` : read a string from a filename or URL, ``N`` : isprime",""
  "``H``","``NNN|SNN|LNN``","``NNN`` : convert base of N|S|L from N1 to N2, ``SNN`` : convert base of N|S|L from N1 to N2, ``LNN`` : convert base of N|S|L from N1 to N2",""
  "``I``","``LL|LN|LB``","``LL`` : get index, ``LN`` : get index, ``LB`` : filter","``__getindex__``"
  "``J``","``LL|LA|AL|AA``","``LL`` : join lists, ``LA`` : add to list, ``AL`` : add to list, ``AA`` : create list [ A A ]",""
  "``K``","``LL|LA|AL|AA``","``LL`` : concatenate lists (modify list 1), ``LA`` : add to list (modify list), ``AL`` : add to list (modify list), ``AA`` : create list [ A A ]",""
  "``L``","``LL|AN|NL``","``LL`` : reshape, ``AN`` : create list by repeating A N times, ``NL`` : reshape",""
  "``N``","``SS|LA|DJ|DS``","``SS`` : return index of first occurance, -1 if not found; keep list on stack, ``LA`` : return index of first occurance, -1 if not found; keep list on stack, ``DJ`` : contains key; keep dict on stack, ``DS`` : contains key; keep dict on stack",""
  "``O``","``LB|DB``","``LB`` : Map block to list, ``DB`` : Map block to dict","``__each__``"
  "``P``","``A``","``A`` : to string","``__str__``"
  "``Q``","``L|N``","``L`` : random choice, ``N`` : N>0: random number 0-N, N<0: random number N-0, N=0: any int","``__random__``"
  "``R``","``L|N|C``","``L`` : len L = 2: range [N1, N1+1, ..., N2], len l = 3: range [N1, N2, ..., N3], ``N`` : range [1, 2 .. N], ``C`` : range [1, 2 .. N]","``__range__``"
  "``S``","``B|J|L``","``B`` : duplicate block, add locals if they do not exist, ``J`` : is defined, ``L`` : sum (fold using +)",""
  "``T``","``N``","``N`` : negate","``__negate__``"
  "``U``","``L``","``L`` : reverse","``__reverse__``"
  "``V``","``J|L|N|C``","``J`` : decrement in place, ``L`` : uncons from back, ``N`` : decrement, ``C`` : decrement","``__dec__``"
  "``W``","``B|D``","``B`` : while loop (repeat as long as block returns true), ``D`` : export all variables",""
  "``X``","``A``","``A`` : assign to variable x and pop from stack",""
  "``Y``","``A``","``A`` : assign to variable y and leave on stack",""
  "``Z``","``N|S``","``N`` : cast to bignum, ``S`` : parse to bignum",""
  "``\\``","``AA``","``AA`` : swap top two elements on the stack",""
  "``^``","``SS|NN``","``SS`` : levenshtein distance, ``NN`` : power","``__pow__`` / ``__rpow__``"
  "``.!``","``B|N|S``","``B`` : copy block without header, ``N`` : signum, ``S`` : parse if number","``__signum__``"
  "``.$``","``..AN``","``..AN`` : copies the Nth item on the stack to the top (not including N)",""
  "``.%``","``NN``","``NN`` : integer division","``__idiv__`` / ``__ridiv__``"
  "``.&``","``SSS|LLB``","``SSS`` : replace all occurances of the regex S1 with S2 in S3, ``LLB`` : zip with",""
  "``.'``","``L|N|S``","``L`` : convert number list to string using UTF-8 encoding, ``N`` : cast to char, ``S`` : cast to char",""
  "``.(``","``NN``","``NN`` : left bitwise shift",""
  "``.)``","``NN``","``NN`` : signed right bitwise shift",""
  "``.*``","``B|L``","``B`` : decompile, ``L`` : compile",""
  "``.+``","``BD|BJ|BL<J>|DD|NN``","``BD`` : swap vars in a copy of B for values defined in D, ``BJ`` : constant capture variable from outer scope, ``BL<J>`` : constant capture variables from outer scope, ``DD`` : update D1 with the values from D2 (modify D1), ``NN`` : gdc",""
  "``.-``","``LL|LN|DJ|DS|NN``","``LL`` : remove items at indices L1 from L2, ``LN`` : remove item at index N from L, ``DJ`` : remove key from dict, ``DS`` : remove key from dict, ``NN`` : lcm",""
  "``./``","``N``","``N`` : ceiling","``__ceil__``"
  "``.;``","``..A``","``..A`` : clear the entire stack",""
  "``.<``","``SS|LN|CC|SN|NN``","``SS`` : greater of, ``LN`` : head / pad 0, ``CC`` : greater of, ``SN`` : head / pad ' ', ``NN`` : greater of","``__head__``"
  "``.=``","``LL|LA|AL``","``LL`` : element-wise equivalence, ``LA`` : element-wise equivalence, ``AL`` : element-wise equivalence",""
  "``.>``","``SS|LN|CC|SN|NN``","``SS`` : lesser of, ``LN`` : tail / pad 0, ``CC`` : lesser of, ``SN`` : tail / pad ' ', ``NN`` : lesser of","``__tail__``"
  "``.?``","``AAA``","``AAA`` : if A1 then A2, else A3. If A2/A3 are blocks, execute",""
  "``.@``","``..AN``","``..AN`` : moves the Nth item on the stack (not including N) to the top",""
  "``.A``","``..A``","``..A`` : wrap entire stack in a list",""
  "``.B``","``AL``","``AL`` : append item to the back of a list",""
  "``.C``","``LB|NN``","``LB`` : sort least to greatest by applying B to L, ``NN`` : xor",""
  "``.D``","``A``","``A`` : throw an exception containing A",""
  "``.E``","``L``","``L`` : length, keep list on stack","``__len__``"
  "``.F``","``L``","``L`` : flatten nested list",""
  "``.G``","``ASN``","``ASN`` : write A as a string to file located at S. N = 0, overwrite. N = 1, append",""
  "``.I``","``LNA|DSA|DJA``","``LNA`` : getindex with default value, ``DSA`` : getindex with default value, ``DJA`` : getindex with default value","``__getindex__``"
  "``.K``","``BB``","``BB`` : try B1, if error, execute B2. Neither block has access to the global stack",""
  "``.M``","``A``","``A`` : get metatable",""
  "``.N``","``LB``","``LB`` : return the index of the first element of L that satifies E; keep list on stack",""
  "``.P``","``A``","``A`` : print to stdout",""
  "``.Q``","``-``","``-`` : return a random decimal from 0 to 1",""
  "``.R``","``N``","``N`` : range [0, 1, .., N-1]",""
  "``.T``","``L``","``L`` : transpose a 2d list",""
  "``.U``","``S``","``S`` : requests a string using a ui dialog, S is the prompt text",""
  "``.V``","``AL``","``AL`` : append item to back of list",""
  "``.\\``","``N``","``N`` : floor","``__floor__``"
  "``.^``","``N``","``N`` : square root","``__sqrt__``"
  "``.|``","``B|N``","``B`` : get meta information for a block, ``N`` : absolute value","``__abs__``"
  "``.~``","``B|J|S|C|D``","``B`` : get contents of block, ``J`` : deref variable; if not a block, put contents in block, ``S`` : parse contents to a block, ``C`` : parse contents to a block, ``D`` : set all variables",""
  "``:!``","``AA``","``AA`` : assert equal",""
  "``:#``","``D:#B|L:#B``","``D:#B`` : map over key value pairs, ``L:#B`` : map","``__each__``"
  "``:$``","``..AN``","``..AN`` : copies the first N items on the stack (not including N)",""
  "``:%``","``S``","``S`` : interpolate string",""
  "``:&``","``A``","``A`` : duplicate reference (same as $ but does not make a copy)",""
  "``:'``","``S|N|C``","``S`` : convert a string to bytes using UTF-8 encoding, ``N`` : identity; return N, ``C`` : to int",""
  "``:*``","``LLB``","``LLB`` : outer product of two lists using B",""
  "``:;``","``..AA``","``..AA`` : clear all but the top of the stack",""
  "``:<``","``SS|CC|NN``","``SS`` : less then or equal to, ``CC`` : less then or equal to, ``NN`` : less then or equal to","``__leq__`` / ``__rleq__``"
  "``:=``","``AS|AJ|AC``","``AS`` : assign A to variable, ``AJ`` : assign A to variable, ``AC`` : assign A to variable",""
  "``:>``","``SS|CC|NN``","``SS`` : greater than or equal to, ``CC`` : greater than or equal to, ``NN`` : greater than or equal to","``__geq__`` / ``__rgeq__``"
  "``:?``","``A``","``A`` : convert to boolean",""
  "``:@``","``AA``","``AA`` : isinstance",""
  "``:A``","``..AN``","``..AN`` : collect N items from stack into list",""
  "``:C``","``J|S``","``J`` : convert symbol to string name, ``S`` : return S",""
  "``:D``","``ASD|AJD``","``ASD`` : set dict index, ``AJD`` : set dict index",""
  "``:E``","``D``","``D`` : number or items in a dict",""
  "``:G``","","n/a : Return the variable scope stack as a list of dicts",""
  "``:I``","``DJ|DS``","``DJ`` : get dict item from key, ``DS`` : get dict item from key",""
  "``:K``","``D``","``D`` : return a list of keys as symbols",""
  "``:M``","``BD|DD``","``BD`` : duplicate block with the given metadata, ``DD`` : set D1's meta to D2 leave D1 on stack",""
  "``:N``","``LA``","``LA`` : find all instances of A in L",""
  "``:O``","``J``","``J`` : Aya meta information",""
  "``:P``","``A``","``A`` : println to stdout",""
  "``:R``","``-``","``-`` : readline from stdin",""
  "``:S``","``B|S|C``","``B`` : if block has single var or op convert to symbol list, else return empty list, ``S`` : convert to symbol, ``C`` : convert to symbol",""
  "``:T``","``A``","``A`` : type of (returns a symbol)",""
  "``:V``","``D``","``D`` : return a list of values",""
  "``:Z``","``N``","``N`` : sleep (milliseconds)",""
  "``:```","``BN:`A``","``BN:`A`` : wrap next N instructions in a block",""
  "``:|``","``LL``","``LL`` : remove all elements in L2 from L1",""
  "``:~``","``L``","``L`` : remove duplicates",""
  "``M!``","``N``","``N`` : factorial","``__fact__``"
  "``M#``","``A``","``A`` : hash code of the object",""
  "``M$``","``-``","``-`` : system time in milliseconds",""
  "``M?``","``B|N|S``","``B`` : get help data for operator, ``N`` : list op descriptions where N=[0:std, 1:dot, 2:colon, 3:misc], ``S`` : search all help data",""
  "``MC``","``N``","``N`` : inverse cosine","``__acos__``"
  "``MI``","``NN``","``NN`` : create complex number",""
  "``ML``","``N``","``N`` : base-10 logarithm","``__log__``"
  "``MS``","``N``","``N`` : inverse sine","``__asin__``"
  "``MT``","``N``","``N`` : inverse tangent","``__atan__``"
  "``Mc``","``N``","``N`` : cosine","``__cos__``"
  "``Md``","``N|S``","``N`` : cast to double, ``S`` : parse double, if invalid, return 0.0","``__float__``"
  "``Me``","``N``","``N`` : exponential function","``__exp__``"
  "``Mi``","``N``","``N`` : imag part of complex number","``__imag__``"
  "``Mk``","``CS``","``CS`` : add special character",""
  "``Ml``","``N``","``N`` : natural logarithm","``__ln__``"
  "``Mm``","``D``","``D`` : true if the dict has a metatable, leave D on stack",""
  "``Mp``","``N``","``N`` : list primes up to N",""
  "``Mr``","``N``","``N`` : convert to fractional number",""
  "``Ms``","``N``","``N`` : sine","``__sin__``"
  "``Mt``","``N``","``N`` : tangent","``__tan__``"
  "``Mu``","``NN``","``NN`` : y x Mu => atan2(y,x)",""
